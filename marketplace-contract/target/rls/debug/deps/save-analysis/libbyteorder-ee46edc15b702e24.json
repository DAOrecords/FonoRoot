{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3","program":"/home/user/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","byteorder","--edition=2018","/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=ee46edc15b702e24","-C","extra-filename=-ee46edc15b702e24","--out-dir","/home/user/MetaBUILD/fono-root/marketplace-contract/target/rls/debug/deps","-L","dependency=/home/user/MetaBUILD/fono-root/marketplace-contract/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/user/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/user/MetaBUILD/fono-root/marketplace-contract/target/rls/debug/deps/libbyteorder-ee46edc15b702e24.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[1344286533117614042,0]},"crate_root":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src","external_crates":[{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6651269719699919063,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5314938362831806024,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3192916554191843392,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10801551532821350179,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17712696282143808288,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17759323731357012152,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14544669950029098253,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7140361926623002963,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7912653715525474172,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9995494595343579593,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7588845087494698681,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[1970575902162233525,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[17110431802946872365,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[13012552651923263309,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[12999591111048205696,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[5038749270737079727,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[4159898706074811085,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[8750230721255451893,0]}},{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1956939412839304600,0]}}],"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","byte_start":0,"byte_end":108834,"line_start":1,"line_end":4052,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":41},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","byte_start":2555,"byte_end":2567,"line_start":78,"line_end":78,"column_start":21,"column_end":33},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":127},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","byte_start":2569,"byte_end":2582,"line_start":78,"line_end":78,"column_start":35,"column_end":48},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","byte_start":0,"byte_end":108834,"line_start":1,"line_end":4052,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":312}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n*/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","byte_start":0,"byte_end":2347,"line_start":1,"line_end":68,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/lib.rs","byte_start":2349,"byte_end":2371,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109726,"byte_end":109738,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123}],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Read`] with methods for reading numbers. (For `std::io`.)","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":108909,"byte_end":108980,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":108981,"byte_end":108984,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":108985,"byte_end":109063,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109064,"byte_end":109142,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109143,"byte_end":109213,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109214,"byte_end":109217,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109218,"byte_end":109232,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109233,"byte_end":109236,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a [`Read`]:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109237,"byte_end":109298,"line_start":16,"line_end":16,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109299,"byte_end":109302,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109303,"byte_end":109314,"line_start":18,"line_end":18,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109315,"byte_end":109339,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109340,"byte_end":109385,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109386,"byte_end":109389,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109390,"byte_end":109438,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109439,"byte_end":109497,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109498,"byte_end":109556,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109557,"byte_end":109564,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109565,"byte_end":109568,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109569,"byte_end":109607,"line_start":27,"line_end":27,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109608,"byte_end":109652,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109653,"byte_end":109715,"line_start":29,"line_end":29,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110520,"byte_end":110527,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109755,"byte_end":109818,"line_start":31,"line_end":31,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109823,"byte_end":109826,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109831,"byte_end":109902,"line_start":33,"line_end":33,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109907,"byte_end":109953,"line_start":34,"line_end":34,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109958,"byte_end":109961,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109966,"byte_end":109978,"line_start":36,"line_end":36,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109983,"byte_end":109986,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":109991,"byte_end":110055,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110060,"byte_end":110063,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110068,"byte_end":110160,"line_start":40,"line_end":40,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110165,"byte_end":110168,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110173,"byte_end":110187,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110192,"byte_end":110195,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110200,"byte_end":110247,"line_start":44,"line_end":44,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110252,"byte_end":110255,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110260,"byte_end":110271,"line_start":46,"line_end":46,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110276,"byte_end":110300,"line_start":47,"line_end":47,"column_start":5,"column_end":29}},{"value":"/ use byteorder::ReadBytesExt;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110305,"byte_end":110337,"line_start":48,"line_end":48,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110342,"byte_end":110345,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110350,"byte_end":110392,"line_start":50,"line_end":50,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(2, rdr.read_u8().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110397,"byte_end":110439,"line_start":51,"line_end":51,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(5, rdr.read_u8().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110444,"byte_end":110486,"line_start":52,"line_end":52,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110491,"byte_end":110498,"line_start":53,"line_end":53,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110503,"byte_end":110512,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111418,"byte_end":111425,"line_start":85,"line_end":85,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110651,"byte_end":110711,"line_start":61,"line_end":61,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110716,"byte_end":110719,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110724,"byte_end":110795,"line_start":63,"line_end":63,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110800,"byte_end":110846,"line_start":64,"line_end":64,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110851,"byte_end":110854,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110859,"byte_end":110871,"line_start":66,"line_end":66,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110876,"byte_end":110879,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110884,"byte_end":110948,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110953,"byte_end":110956,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":110961,"byte_end":111053,"line_start":70,"line_end":70,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111058,"byte_end":111061,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111066,"byte_end":111080,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111085,"byte_end":111088,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Read signed 8 bit integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111093,"byte_end":111138,"line_start":74,"line_end":74,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111143,"byte_end":111146,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111151,"byte_end":111162,"line_start":76,"line_end":76,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111167,"byte_end":111191,"line_start":77,"line_end":77,"column_start":5,"column_end":29}},{"value":"/ use byteorder::ReadBytesExt;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111196,"byte_end":111228,"line_start":78,"line_end":78,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111233,"byte_end":111236,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x02, 0xfb]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111241,"byte_end":111289,"line_start":80,"line_end":80,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(2, rdr.read_i8().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111294,"byte_end":111336,"line_start":81,"line_end":81,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(-5, rdr.read_i8().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111341,"byte_end":111384,"line_start":82,"line_end":82,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111389,"byte_end":111396,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111401,"byte_end":111410,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112249,"byte_end":112257,"line_start":112,"line_end":112,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"pub fn read_u16<T: ByteOrder>(&mut Self) -> Result<u16>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111555,"byte_end":111619,"line_start":91,"line_end":91,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111624,"byte_end":111627,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111632,"byte_end":111644,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111649,"byte_end":111652,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111657,"byte_end":111721,"line_start":95,"line_end":95,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111726,"byte_end":111729,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111734,"byte_end":111826,"line_start":97,"line_end":97,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111831,"byte_end":111834,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111839,"byte_end":111853,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111858,"byte_end":111861,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111866,"byte_end":111925,"line_start":101,"line_end":101,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111930,"byte_end":111933,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111938,"byte_end":111949,"line_start":103,"line_end":103,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111954,"byte_end":111978,"line_start":104,"line_end":104,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":111983,"byte_end":112028,"line_start":105,"line_end":105,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112033,"byte_end":112036,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112041,"byte_end":112089,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112094,"byte_end":112152,"line_start":108,"line_end":108,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112157,"byte_end":112215,"line_start":109,"line_end":109,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112220,"byte_end":112227,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112232,"byte_end":112241,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113109,"byte_end":113117,"line_start":139,"line_end":139,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"pub fn read_i16<T: ByteOrder>(&mut Self) -> Result<i16>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112407,"byte_end":112468,"line_start":118,"line_end":118,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112473,"byte_end":112476,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112481,"byte_end":112493,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112498,"byte_end":112501,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112506,"byte_end":112570,"line_start":122,"line_end":122,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112575,"byte_end":112578,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112583,"byte_end":112675,"line_start":124,"line_end":124,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112680,"byte_end":112683,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112688,"byte_end":112702,"line_start":126,"line_end":126,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112707,"byte_end":112710,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Read signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112715,"byte_end":112772,"line_start":128,"line_end":128,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112777,"byte_end":112780,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112785,"byte_end":112796,"line_start":130,"line_end":130,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112801,"byte_end":112825,"line_start":131,"line_end":131,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112830,"byte_end":112875,"line_start":132,"line_end":132,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112880,"byte_end":112883,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112888,"byte_end":112948,"line_start":134,"line_end":134,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":112953,"byte_end":113011,"line_start":135,"line_end":135,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113016,"byte_end":113075,"line_start":136,"line_end":136,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113080,"byte_end":113087,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113092,"byte_end":113101,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113904,"byte_end":113912,"line_start":165,"line_end":165,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"pub fn read_u24<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113267,"byte_end":113331,"line_start":145,"line_end":145,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113336,"byte_end":113339,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113344,"byte_end":113356,"line_start":147,"line_end":147,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113361,"byte_end":113364,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113369,"byte_end":113433,"line_start":149,"line_end":149,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113438,"byte_end":113441,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113446,"byte_end":113538,"line_start":151,"line_end":151,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113543,"byte_end":113546,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113551,"byte_end":113565,"line_start":153,"line_end":153,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113570,"byte_end":113573,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 24 bit big-endian integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113578,"byte_end":113637,"line_start":155,"line_end":155,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113642,"byte_end":113645,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113650,"byte_end":113661,"line_start":157,"line_end":157,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113666,"byte_end":113690,"line_start":158,"line_end":158,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113695,"byte_end":113740,"line_start":159,"line_end":159,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113745,"byte_end":113748,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113753,"byte_end":113807,"line_start":161,"line_end":161,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113812,"byte_end":113870,"line_start":162,"line_end":162,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113875,"byte_end":113882,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":113887,"byte_end":113896,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114697,"byte_end":114705,"line_start":191,"line_end":191,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"pub fn read_i24<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114062,"byte_end":114123,"line_start":171,"line_end":171,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114128,"byte_end":114131,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114136,"byte_end":114148,"line_start":173,"line_end":173,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114153,"byte_end":114156,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114161,"byte_end":114225,"line_start":175,"line_end":175,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114230,"byte_end":114233,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114238,"byte_end":114330,"line_start":177,"line_end":177,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114335,"byte_end":114338,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114343,"byte_end":114357,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114362,"byte_end":114365,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Read signed 24 bit big-endian integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114370,"byte_end":114427,"line_start":181,"line_end":181,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114432,"byte_end":114435,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114440,"byte_end":114451,"line_start":183,"line_end":183,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114456,"byte_end":114480,"line_start":184,"line_end":184,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114485,"byte_end":114530,"line_start":185,"line_end":185,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114535,"byte_end":114538,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114543,"byte_end":114597,"line_start":187,"line_end":187,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114602,"byte_end":114663,"line_start":188,"line_end":188,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114668,"byte_end":114675,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114680,"byte_end":114689,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115498,"byte_end":115506,"line_start":217,"line_end":217,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"pub fn read_u32<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114855,"byte_end":114919,"line_start":197,"line_end":197,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114924,"byte_end":114927,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114932,"byte_end":114944,"line_start":199,"line_end":199,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114949,"byte_end":114952,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":114957,"byte_end":115021,"line_start":201,"line_end":201,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115026,"byte_end":115029,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115034,"byte_end":115126,"line_start":203,"line_end":203,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115131,"byte_end":115134,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115139,"byte_end":115153,"line_start":205,"line_end":205,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115158,"byte_end":115161,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115166,"byte_end":115225,"line_start":207,"line_end":207,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115230,"byte_end":115233,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115238,"byte_end":115249,"line_start":209,"line_end":209,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115254,"byte_end":115278,"line_start":210,"line_end":210,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115283,"byte_end":115328,"line_start":211,"line_end":211,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115333,"byte_end":115336,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115341,"byte_end":115401,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115406,"byte_end":115464,"line_start":214,"line_end":214,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115469,"byte_end":115476,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115481,"byte_end":115490,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116297,"byte_end":116305,"line_start":243,"line_end":243,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"pub fn read_i32<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115656,"byte_end":115717,"line_start":223,"line_end":223,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115722,"byte_end":115725,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115730,"byte_end":115742,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115747,"byte_end":115750,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115755,"byte_end":115819,"line_start":227,"line_end":227,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115824,"byte_end":115827,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115832,"byte_end":115924,"line_start":229,"line_end":229,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115929,"byte_end":115932,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115937,"byte_end":115951,"line_start":231,"line_end":231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115956,"byte_end":115959,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Read signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":115964,"byte_end":116021,"line_start":233,"line_end":233,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116026,"byte_end":116029,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116034,"byte_end":116045,"line_start":235,"line_end":235,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116050,"byte_end":116074,"line_start":236,"line_end":236,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116079,"byte_end":116124,"line_start":237,"line_end":237,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116129,"byte_end":116132,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116137,"byte_end":116197,"line_start":239,"line_end":239,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116202,"byte_end":116263,"line_start":240,"line_end":240,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116268,"byte_end":116275,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116280,"byte_end":116289,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117122,"byte_end":117130,"line_start":269,"line_end":269,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::io::ReadBytesExt::read_u48","value":"pub fn read_u48<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 48 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116455,"byte_end":116519,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116524,"byte_end":116527,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116532,"byte_end":116544,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116549,"byte_end":116552,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116557,"byte_end":116621,"line_start":253,"line_end":253,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116626,"byte_end":116629,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116634,"byte_end":116726,"line_start":255,"line_end":255,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116731,"byte_end":116734,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116739,"byte_end":116753,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116758,"byte_end":116761,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 48 bit big-endian integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116766,"byte_end":116825,"line_start":259,"line_end":259,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116830,"byte_end":116833,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116838,"byte_end":116849,"line_start":261,"line_end":261,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116854,"byte_end":116878,"line_start":262,"line_end":262,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116883,"byte_end":116928,"line_start":263,"line_end":263,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116933,"byte_end":116936,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":116941,"byte_end":117013,"line_start":265,"line_end":265,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117018,"byte_end":117088,"line_start":266,"line_end":266,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117093,"byte_end":117100,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117105,"byte_end":117114,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117943,"byte_end":117951,"line_start":295,"line_end":295,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::io::ReadBytesExt::read_i48","value":"pub fn read_i48<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 48 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117280,"byte_end":117341,"line_start":275,"line_end":275,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117346,"byte_end":117349,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117354,"byte_end":117366,"line_start":277,"line_end":277,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117371,"byte_end":117374,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117379,"byte_end":117443,"line_start":279,"line_end":279,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117448,"byte_end":117451,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117456,"byte_end":117548,"line_start":281,"line_end":281,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117553,"byte_end":117556,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117561,"byte_end":117575,"line_start":283,"line_end":283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117580,"byte_end":117583,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Read signed 48 bit big-endian integers from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117588,"byte_end":117645,"line_start":285,"line_end":285,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117650,"byte_end":117653,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117658,"byte_end":117669,"line_start":287,"line_end":287,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117674,"byte_end":117698,"line_start":288,"line_end":288,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117703,"byte_end":117748,"line_start":289,"line_end":289,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117753,"byte_end":117756,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117761,"byte_end":117833,"line_start":291,"line_end":291,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117838,"byte_end":117909,"line_start":292,"line_end":292,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117914,"byte_end":117921,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":117926,"byte_end":117935,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118782,"byte_end":118790,"line_start":321,"line_end":321,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"pub fn read_u64<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118101,"byte_end":118165,"line_start":301,"line_end":301,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118170,"byte_end":118173,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118178,"byte_end":118190,"line_start":303,"line_end":303,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118195,"byte_end":118198,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118203,"byte_end":118267,"line_start":305,"line_end":305,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118272,"byte_end":118275,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118280,"byte_end":118372,"line_start":307,"line_end":307,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118377,"byte_end":118380,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118385,"byte_end":118399,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118404,"byte_end":118407,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 64 bit big-endian integer from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118412,"byte_end":118473,"line_start":311,"line_end":311,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118478,"byte_end":118481,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118486,"byte_end":118497,"line_start":313,"line_end":313,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118502,"byte_end":118526,"line_start":314,"line_end":314,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118531,"byte_end":118576,"line_start":315,"line_end":315,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118581,"byte_end":118584,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118589,"byte_end":118673,"line_start":317,"line_end":317,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118678,"byte_end":118748,"line_start":318,"line_end":318,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118753,"byte_end":118760,"line_start":319,"line_end":319,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118765,"byte_end":118774,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119595,"byte_end":119603,"line_start":347,"line_end":347,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"pub fn read_i64<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":118940,"byte_end":119001,"line_start":327,"line_end":327,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119006,"byte_end":119009,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119014,"byte_end":119026,"line_start":329,"line_end":329,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119031,"byte_end":119034,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119039,"byte_end":119103,"line_start":331,"line_end":331,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119108,"byte_end":119111,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119116,"byte_end":119208,"line_start":333,"line_end":333,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119213,"byte_end":119216,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119221,"byte_end":119235,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119240,"byte_end":119243,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Read a signed 64 bit big-endian integer from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119248,"byte_end":119306,"line_start":337,"line_end":337,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119311,"byte_end":119314,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119319,"byte_end":119330,"line_start":339,"line_end":339,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119335,"byte_end":119359,"line_start":340,"line_end":340,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119364,"byte_end":119409,"line_start":341,"line_end":341,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119414,"byte_end":119417,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119422,"byte_end":119485,"line_start":343,"line_end":343,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119490,"byte_end":119561,"line_start":344,"line_end":344,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119566,"byte_end":119573,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119578,"byte_end":119587,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120539,"byte_end":120548,"line_start":376,"line_end":376,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::io::ReadBytesExt::read_u128","value":"pub fn read_u128<T: ByteOrder>(&mut Self) -> Result<u128>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 128 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119753,"byte_end":119818,"line_start":353,"line_end":353,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119823,"byte_end":119826,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119831,"byte_end":119843,"line_start":355,"line_end":355,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119848,"byte_end":119851,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119856,"byte_end":119920,"line_start":357,"line_end":357,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119925,"byte_end":119928,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":119933,"byte_end":120025,"line_start":359,"line_end":359,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120030,"byte_end":120033,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120038,"byte_end":120052,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120057,"byte_end":120060,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 128 bit big-endian integer from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120065,"byte_end":120127,"line_start":363,"line_end":363,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120132,"byte_end":120135,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120140,"byte_end":120151,"line_start":365,"line_end":365,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120156,"byte_end":120180,"line_start":366,"line_end":366,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120185,"byte_end":120230,"line_start":367,"line_end":367,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120235,"byte_end":120238,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120243,"byte_end":120278,"line_start":369,"line_end":369,"column_start":5,"column_end":40}},{"value":"/     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120283,"byte_end":120338,"line_start":370,"line_end":370,"column_start":5,"column_end":60}},{"value":"/     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120343,"byte_end":120397,"line_start":371,"line_end":371,"column_start":5,"column_end":59}},{"value":"/ ]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120402,"byte_end":120409,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120414,"byte_end":120505,"line_start":373,"line_end":373,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120510,"byte_end":120517,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120522,"byte_end":120531,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121384,"byte_end":121393,"line_start":402,"line_end":402,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::io::ReadBytesExt::read_i128","value":"pub fn read_i128<T: ByteOrder>(&mut Self) -> Result<i128>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 128 bit integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120701,"byte_end":120763,"line_start":382,"line_end":382,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120768,"byte_end":120771,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120776,"byte_end":120788,"line_start":384,"line_end":384,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120793,"byte_end":120796,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120801,"byte_end":120865,"line_start":386,"line_end":386,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120870,"byte_end":120873,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120878,"byte_end":120970,"line_start":388,"line_end":388,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120975,"byte_end":120978,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":120983,"byte_end":120997,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121002,"byte_end":121005,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ Read a signed 128 bit big-endian integer from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121010,"byte_end":121069,"line_start":392,"line_end":392,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121074,"byte_end":121077,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121082,"byte_end":121093,"line_start":394,"line_end":394,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121098,"byte_end":121122,"line_start":395,"line_end":395,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121127,"byte_end":121172,"line_start":396,"line_end":396,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121177,"byte_end":121180,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121185,"byte_end":121272,"line_start":398,"line_end":398,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121277,"byte_end":121350,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121355,"byte_end":121362,"line_start":400,"line_end":400,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121367,"byte_end":121376,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122180,"byte_end":122189,"line_start":427,"line_end":427,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"pub fn read_uint<T: ByteOrder>(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121546,"byte_end":121611,"line_start":408,"line_end":408,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121616,"byte_end":121619,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121624,"byte_end":121636,"line_start":410,"line_end":410,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121641,"byte_end":121644,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121649,"byte_end":121713,"line_start":412,"line_end":412,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121718,"byte_end":121721,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121726,"byte_end":121818,"line_start":414,"line_end":414,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121823,"byte_end":121826,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121831,"byte_end":121845,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121850,"byte_end":121853,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121858,"byte_end":121919,"line_start":418,"line_end":418,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121924,"byte_end":121927,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121932,"byte_end":121943,"line_start":420,"line_end":420,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121948,"byte_end":121972,"line_start":421,"line_end":421,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":121977,"byte_end":122022,"line_start":422,"line_end":422,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122027,"byte_end":122030,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122035,"byte_end":122089,"line_start":424,"line_end":424,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122094,"byte_end":122158,"line_start":425,"line_end":425,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122163,"byte_end":122172,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":123014,"byte_end":123022,"line_start":452,"line_end":452,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"pub fn read_int<T: ByteOrder>(&mut Self, usize) -> Result<i64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122383,"byte_end":122445,"line_start":433,"line_end":433,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122450,"byte_end":122453,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122458,"byte_end":122470,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122475,"byte_end":122478,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122483,"byte_end":122547,"line_start":437,"line_end":437,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122552,"byte_end":122555,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122560,"byte_end":122652,"line_start":439,"line_end":439,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122657,"byte_end":122660,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122665,"byte_end":122679,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122684,"byte_end":122687,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122692,"byte_end":122753,"line_start":443,"line_end":443,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122758,"byte_end":122761,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122766,"byte_end":122777,"line_start":445,"line_end":445,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122782,"byte_end":122806,"line_start":446,"line_end":446,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122811,"byte_end":122856,"line_start":447,"line_end":447,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122861,"byte_end":122864,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122869,"byte_end":122923,"line_start":449,"line_end":449,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122928,"byte_end":122992,"line_start":450,"line_end":450,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":122997,"byte_end":123006,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":123302,"byte_end":123314,"line_start":460,"line_end":460,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::io::ReadBytesExt::read_uint128","value":"pub fn read_uint128<T: ByteOrder>(&mut Self, usize) -> Result<u128>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":123215,"byte_end":123280,"line_start":458,"line_end":458,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":123285,"byte_end":123294,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":123597,"byte_end":123608,"line_start":468,"line_end":468,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::io::ReadBytesExt::read_int128","value":"pub fn read_int128<T: ByteOrder>(&mut Self, usize) -> Result<i128>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":123513,"byte_end":123575,"line_start":466,"line_end":466,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.4.3/src/io.rs","byte_start":123580,"byte_end":123589,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/byteo